// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  phoneNumber String?     @map("phone_number")
  firstName   String      @map("first_name")
  lastName    String      @map("last_name")
  isActive    Boolean     @default(true) @map("is_active")
  password    String?
  token       String?
  role        Role
  doctor      Doctor?
  patient     Patient?
  admin       Admin?
  superAdmin  SuperAdmin?

  @@map("users")
}

model Doctor {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  gender         Gender           @map("gender")
  doctorCode     String           @map("doctor_code")
  speciality     String           @map("speciality")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime?        @updatedAt @map("updated_at") @db.Timestamptz()
  user           User             @relation(fields: [userId], references: [id])
  hospitals      Hospital[]       @relation("DoctorHospitals")
  patients       Patient[]        @relation("DoctorPatient")
  DoctorPatient  DoctorPatient[]
  DoctorHospital DoctorHospital[]

  @@unique([doctorCode])
  @@map("doctors")
}

model Patient {
  id                Int               @id @default(autoincrement())
  userId            Int               @unique
  gender            Gender            @map("gender")
  bloodGroup        String            @map("blood_group")
  dob               DateTime          @map("dob") @db.Timestamptz()
  digitalHealthCode String            @map("digital_health_code")
  addressLine1      String            @map("address_line_1")
  addressLine2      String?           @map("address_line_2")
  city              String
  postalCode        String            @map("postal_code")
  countryCode       String            @map("country_code")
  stateCode         String?           @map("state_code")
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime?         @updatedAt @map("updated_at") @db.Timestamptz()
  isActive          Boolean           @map("is_active")
  user              User              @relation(fields: [userId], references: [id])
  hospitals         Hospital[]        @relation("PatientHospitals")
  doctors           Doctor[]          @relation("DoctorPatient")
  DoctorPatient     DoctorPatient[]
  PatientHospital   PatientHospital[]

  @@unique([digitalHealthCode])
  @@map("patients")
}

model Hospital {
  id              Int               @id @default(autoincrement())
  name            String
  addressLine1    String
  addressLine2    String?
  city            String
  postalCode      String            @map("postal_code")
  countryCode     String            @map("country_code")
  stateCode       String?           @map("state_code")
  email           String?
  phoneNumber     String?
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime?         @updatedAt @map("updated_at") @db.Timestamptz()
  isActive        Boolean           @map("is_active")
  code            String            @map("code")
  doctors         Doctor[]          @relation("DoctorHospitals")
  patients        Patient[]         @relation("PatientHospitals")
  admins          Admin[]           @relation("AdminHospitals")
  DoctorHospital  DoctorHospital[]
  PatientHospital PatientHospital[]
  AdminHospital   AdminHospital[]

  @@unique([code])
  @@map("hospitals")
}

model Admin {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  user          User            @relation(fields: [userId], references: [id])
  hospitals     Hospital[]      @relation("AdminHospitals")
  AdminHospital AdminHospital[]

  @@map("admins")
}

model SuperAdmin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("super_admins")
}

model DoctorPatient {
  doctorId  Int     @map("doctor_id")
  patientId Int     @map("patient_id")
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  patient   Patient @relation(fields: [patientId], references: [id])

  @@id([doctorId, patientId])
  @@map("doctor_patients")
}

model DoctorHospital {
  doctorId   Int      @map("doctor_id")
  hospitalId Int      @map("hospital_id")
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  @@id([doctorId, hospitalId])
  @@map("doctor_hospitals")
}

model PatientHospital {
  patientId  Int      @map("patient_id")
  hospitalId Int      @map("hospital_id")
  patient    Patient  @relation(fields: [patientId], references: [id])
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  @@id([patientId, hospitalId])
  @@map("patient_hospitals")
}

model AdminHospital {
  adminId    Int      @map("admin_id")
  hospitalId Int      @map("hospital_id")
  admin      Admin    @relation(fields: [adminId], references: [id])
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  @@id([adminId, hospitalId])
  @@map("admin_hospitals")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}