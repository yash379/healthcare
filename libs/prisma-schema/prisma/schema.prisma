// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  phoneNumber String?     @map("phone_number")
  firstName   String      @map("first_name")
  lastName    String      @map("last_name")
  isActive    Boolean     @default(true) @map("is_active")
  password    String?
  token       String?
  role        Role
  doctor      Doctor?
  patient     Patient?
  admin       Admin?
  superAdmin  SuperAdmin?

  @@map("users")
}

model Doctor {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  gender        Gender          @map("gender")
  doctorCode    String          @map("doctor_code")
  speciality    String          @map("speciality")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime?       @updatedAt @map("updated_at") @db.Timestamptz()
  hospitalId    Int // Foreign key to Hospital
  user          User            @relation(fields: [userId], references: [id])
  hospital      Hospital        @relation(fields: [hospitalId], references: [id]) // Relationship with Hospital
  patients      Patient[]       @relation("DoctorPatient") // Many-to-Many relationship with Patients
  DoctorPatient DoctorPatient[]

  @@unique([doctorCode])
  @@map("doctors")
}

model Patient {
  id                Int             @id @default(autoincrement())
  userId            Int             @unique
  gender            Gender          @map("gender")
  bloodGroup        String          @map("blood_group")
  dob               DateTime        @map("dob") @db.Timestamptz()
  digitalHealthCode String          @map("digital_health_code")
  addressLine1      String          @map("address_line_1")
  addressLine2      String?         @map("address_line_2")
  city              String
  postalCode        String          @map("postal_code")
  countryCode       String          @map("country_code")
  stateCode         String?         @map("state_code")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime?       @updatedAt @map("updated_at") @db.Timestamptz()
  isActive          Boolean         @map("is_active")
  hospitalId        Int // Foreign key to Hospital
  user              User            @relation(fields: [userId], references: [id])
  hospital          Hospital        @relation(fields: [hospitalId], references: [id]) // Relationship with Hospital
  doctors           Doctor[]        @relation("DoctorPatient") // Many-to-Many relationship with Doctors
  DoctorPatient     DoctorPatient[]

  @@unique([digitalHealthCode])
  @@map("patients")
}

model Hospital {
  id           Int       @id @default(autoincrement())
  name         String
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String    @map("postal_code")
  countryCode  String    @map("country_code")
  stateCode    String?   @map("state_code")
  email        String?
  phoneNumber  String?
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz()
  isActive     Boolean   @map("is_active")
  code         String    @map("code")
  doctors      Doctor[] // One-to-Many relationship with Doctors
  patients     Patient[] // One-to-Many relationship with Patients
  Admin        Admin[]

  @@unique([code])
  @@map("hospitals")
}

model Admin {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  hospitalId Int
  user       User     @relation(fields: [userId], references: [id])
  hospital   Hospital @relation(fields: [hospitalId], references: [id])

  @@map("admins")
}

model SuperAdmin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("super_admins")
}

model DoctorPatient {
  doctorId  Int
  patientId Int
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  patient   Patient @relation(fields: [patientId], references: [id])

  @@id([doctorId, patientId])
  @@map("doctor_patients")
}


